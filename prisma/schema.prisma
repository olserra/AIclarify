// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  apiKeys       ApiKey[]
  analyses      Analysis[]
  settings      UserSettings?
  subscription  Subscription?
  accounts      Account[]
  sessions      Session[]
}

model ApiKey {
  id          String   @id @default(cuid())
  name        String
  key         String   @unique
  scope       String   // read, write, admin
  lastUsed    DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  userId      String
}

model Analysis {
  id              String   @id @default(cuid())
  code            String   @db.Text
  language        String
  complexity      Float
  maintainability Float
  coverage        Float?
  issues          Issue[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id])
  userId          String
}

model Issue {
  id          String   @id @default(cuid())
  type        String   // warning, error, info
  message     String
  line        Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  analysis    Analysis @relation(fields: [analysisId], references: [id])
  analysisId  String
}

model UserSettings {
  id              String   @id @default(cuid())
  theme           String   @default("system")
  notifications   Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id])
  userId          String   @unique
}

model Subscription {
  id              String   @id @default(cuid())
  status          String   // active, canceled, past_due
  plan            String   // free, pro, enterprise
  currentPeriodEnd DateTime
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id])
  userId          String   @unique
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
